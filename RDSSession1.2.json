{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "This CloudFormation sample template creates resources in a VPC required for migration.",
  "Parameters" : {
    "ClientIP" : {
      "Description" : "The IP address range that can be used to connect to the RDS instances from your local machine.It must be a valid IP CIDR range of the form x.x.x.x/x.Pls get your address using checkip.amazonaws.com or whatsmyip.org",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "72.21.192.0/19",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Pls get your address using checkip.amazonaws.com or whatsmyip.org."
    },
    "myKeyPair" : {
      "Description" : "Select existing key pair in your account. If not showing you need to precreate a new one from EC2 Console",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Client Configuration" },
          "Parameters" : [  "ClientIP","myKeyPair" ]
        }
      ]
    }
  },
  "Resources": {
    "VPC01": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.31.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {"Key": "Name", "Value": "myVPC"},
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"}}
        ]
      }
    },
    "SubNet01": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.0.0/26",
        "MapPublicIpOnLaunch" : "True",
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
        "VpcId": {
          "Ref": "VPC01"
        }
      }
    },
    "SubNet02": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.1.0/26",
        "MapPublicIpOnLaunch" : "True",
        "AvailabilityZone": { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
        "VpcId": {
          "Ref": "VPC01"
        }
      }
    },
    "SubNet03": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.31.2.0/26",
        "MapPublicIpOnLaunch" : "True",
        "AvailabilityZone": { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
        "VpcId": {
          "Ref": "VPC01"
        }
      }
    },
    "InternetGateway01": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC01" },
        "InternetGatewayId" : { "Ref" : "InternetGateway01" }
      }
    },
    "RouteTable01": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC01" },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable01" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway01" }
      }
    },
    "SubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubNet01" },
        "RouteTableId" : { "Ref" : "RouteTable01" }
      }
    },
    "SubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubNet02" },
        "RouteTableId" : { "Ref" : "RouteTable01" }
      }
    },
    "SubnetRouteTableAssociation3" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubNet03" },
        "RouteTableId" : { "Ref" : "RouteTable01" }
      }
    },
    "DbSubnetDefault": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet available for the RDS DB Instance",
        "SubnetIds": [{ "Ref": "SubNet01"}, {"Ref": "SubNet02"},{"Ref": "SubNet03"}]
      }
    },
    "EC2ClientSG":{
      "Type": "AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription": "EC2 SG",
        "VpcId": {"Ref":"VPC01"},
        "SecurityGroupIngress":[
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort":"22",
            "CidrIp":{"Ref":"ClientIP"}
          },{
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort":"3389",
            "CidrIp":{"Ref":"ClientIP"}
          },{
            "IpProtocol" : "tcp",
            "FromPort" : "1433",
            "ToPort" : "1433",
            "CidrIp" : { "Ref" : "ClientIP"}
          },{
            "IpProtocol" : "tcp",
            "FromPort" : "0",
            "ToPort" : "65535",
            "CidrIp" : "172.31.0.0/16"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "EC2 SG"
          }
        ]
      }
    },
    "RDSDatabaseSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "DB SG",
        "VpcId": {"Ref": "VPC01"},
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "1521",
            "ToPort" : "1521",
            "CidrIp" : { "Ref" : "ClientIP"}
          },{
            "IpProtocol" : "tcp",
            "FromPort" : "1433",
            "ToPort" : "1433",
            "CidrIp" : { "Ref" : "ClientIP"}
          },{
            "IpProtocol" : "tcp",
            "FromPort" : "5432",
            "ToPort" : "5432",
            "CidrIp" : { "Ref" : "ClientIP"}
          },{
            "IpProtocol" : "tcp",
            "FromPort" : "0",
            "ToPort" : "65535",
            "CidrIp" : "172.31.0.0/16"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "DB SG"
          }
        ]
      }
    },
    "EC2AccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/AdministratorAccess" ],
        "Path": "/"
      }
    },
    "EC2Client01":{
      "Type": "AWS::EC2::Instance",
      "Properties":{
        "ImageId" : "ami-009d6802948d06e52",
        "InstanceType" : "m5.large",
        "KeyName" :{ "Ref" :"myKeyPair" },
        "UserData" :{
          "Fn::Base64": {
            "Fn::Join":[
              "",
              [
                "#!/bin/bash -ex\n",
                "sudo yum -y update","\n",
                "sudo amazon-linux-extras install -y postgresql10","\n",
                "sudo yum -y install https://mssqlcli.blob.core.windows.net/daily/rpm/mssql-cli-dev-latest.rpm","\n",
                "sudo amazon-linux-extras install -y docker","\n",
                "sudo service docker start","\n",
                "sudo systemctl enable docker", "\n",
                "sudo usermod -aG docker ec2-user","\n",
                "curl -O https://bootstrap.pypa.io/get-pip.py","\n",
                "python get-pip.py --user","\n",
                "export PATH=~/.local/bin:/home/ec2-user:$PATH","\n",
                "source ~/.bash_profile","\n",
                "pip --version","\n",
                "pip install awscli --upgrade --user","\n",
                "wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem  -O/home/ec2-user/rds-combined-ca-bundle.pem","\n",
                "sudo su","\n",
                "sudo echo 'psql postgresql://myuser:pAsswOrd12@", { "Fn::GetAtt": [ "AUPG106", "Endpoint.Address" ] }, "/mydata ' >/home/ec2-user/aupsqlw.sh","\n",
                "sudo chmod +x /home/ec2-user/aupsqlw.sh","\n",
                "sudo echo 'psql postgresql://myuser:pAsswOrd12@", { "Fn::GetAtt": [ "AUPG106", "ReadEndpoint.Address" ] }, "/mydata ' >/home/ec2-user/aupsqlr.sh","\n",
                "sudo chmod +x /home/ec2-user/aupsqlr.sh","\n",
                "sudo echo 'mssql-cli -S ", { "Fn::GetAtt": [ "SQLServerEE13", "PublicDnsName" ] },",1433"," -U myuser -P pAsswOrd12 ' >/home/ec2-user/mssqlb.sh","\n",
                "sudo chmod +x /home/ec2-user/mssqlb.sh","\n",
                "sudo echo ","docker run --interactive guywithnose/sqlplus sqlplus \"'myuser/pAsswOrd12@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=",{"Fn::GetAtt":["OracleDB","Endpoint.Address"]},") (PORT=",{"Fn::GetAtt":["OracleDB","Endpoint.Port"]},"))(CONNECT_DATA=(SID=mydata)))'\" >/home/ec2-user/oracleb.sh","\n",
                "sudo echo ","'docker container rm --force $(docker container ls -a --quiet)' >>/home/ec2-user/oracleb.sh","\n",
                "sudo chmod +x /home/ec2-user/oracleb.sh","\n",
                "exit","\n"
              ]
            ]
          }
        },
        "SecurityGroupIds": [{ "Ref" : "EC2ClientSG" }],
        "IamInstanceProfile": { "Ref" : "Ec2InstProfile" },
        "SubnetId" : { "Ref" :"SubNet01" },
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key": "auto-delete","Value":"never"},
          {"Key": "Name", "Value":"Node1" }
        ]
      },
      "DependsOn": ["SQLServerEE13"]
    },
    "Ec2InstProfile":{
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref" : "EC2AccessRole" }]
      }
    },
    "EIP01":{
      "Type": "AWS::EC2::EIP",
      "Properties":{
        "Domain":"vpc",
        "InstanceId": {"Ref":"EC2Client01"}
      }
    },
    "RDSEnMonRole":{
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "monitoring.rds.amazonaws.com" ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole" ],
        "Path": "/"
      }
    },
    "AUPG106" : {
      "Type" : "AWS::RDS::DBCluster",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "MasterUsername" : "myuser" ,
        "MasterUserPassword" : "pAsswOrd12" ,
        "Engine" : "aurora-postgresql",
        "EngineVersion" :"10.6",
        "Port":"5432",
        "DatabaseName":"mydata",
        "DBSubnetGroupName" : { "Ref" : "DbSubnetDefault" },
        "DBClusterParameterGroupName" : { "Ref" : "AUPG106ClPGrp" },
        "VpcSecurityGroupIds"  : [{ "Ref" : "RDSDatabaseSG" }]
      }
    },
    "AUPG106ClPGrp": {
      "Type": "AWS::RDS::DBClusterParameterGroup",
      "Properties" :{
        "Description" : "AuroraMySQL Cluster Parameter Group",
        "Family" : "aurora-postgresql10",
        "Parameters" : {
          "timezone" : "UTC",
          "rds.logical_replication" : "1"
        }
      }
    },
    "AUPG106Inst1" : {
      "Type" : "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "DBSubnetGroupName" : {"Ref" : "DbSubnetDefault"},
        "Engine" : "aurora-postgresql",
        "DBClusterIdentifier" : {"Ref" : "AUPG106"},
        "PubliclyAccessible" : "true",
        "DBParameterGroupName" :{"Ref": "AUPG106DBPGrp"},
        "DBInstanceClass" : "db.r4.large",
        "MonitoringInterval":"30",
        "MonitoringRoleArn":{"Fn::GetAtt" : ["RDSEnMonRole", "Arn"] },
        "Tags" : [
          {"Key": "auto-delete","Value":"never"},
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
        ]
      }
    },
    "AUPG106DBPGrp": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for Aurora PG",
        "Family" : "aurora-postgresql10"
      }
    },
    "OracleDB": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Delete",
      "Properties": {
        "AllocatedStorage": "100",
        "CharacterSetName": "AL32UTF8",
        "DBSnapshotIdentifier":"arn:aws:rds:us-east-1:499513257414:snapshot:dbsessionoracle-final",
        "DBInstanceClass": "db.m4.large",
        "PubliclyAccessible": "true",
        "StorageType": "gp2",
        "Engine": "oracle-ee",
        "DBParameterGroupName" :{"Ref": "OCDBParameterGroup"},
        "DBSubnetGroupName": {"Ref": "DbSubnetDefault"},
        "MonitoringInterval":"30",
        "MonitoringRoleArn":{"Fn::GetAtt" : ["RDSEnMonRole", "Arn"] },
        "VPCSecurityGroups": [{"Ref": "RDSDatabaseSG"}],
        "Tags": [
          {"Key": "workload-type","Value": "other"},
          {"Key": "Name","Value":"OracleDB"},
          {"Key": "auto-delete","Value":"never"},
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
        ]
      },
      "DependsOn": "AttachGateway"
    },
    "OCDBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties" :{
        "Description" : "DB Parameter Group for oracle-ee",
        "Family" : "oracle-ee-12.1"
      }
    },
    "SQLServerEE13": {
      "Type": "AWS::EC2::Instance",
      "Properties":{
        "ImageId" : "ami-0cdce26bb44275a87",
        "InstanceType" : "m4.xlarge",
        "KeyName" :{ "Ref" :"myKeyPair" },
        "SecurityGroupIds": [{ "Ref" : "EC2ClientSG" }],
        "IamInstanceProfile": { "Ref" : "Ec2InstProfile" },
        "SubnetId" : { "Ref" :"SubNet01" },
        "Tags": [
          {"Key": "Name","Value":"SQLServer2016SP2ENT"},
          {"Key": "auto-delete","Value":"never"},
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
        ]
      },
      "DependsOn": "AttachGateway"
    }
  },
  "Outputs" : {
    "clientInstance" : {
      "Value" : { "Fn::Join": ["", [ "ssh -i ",{ "Ref" :"myKeyPair" },".pem ec2-user@", { "Fn::GetAtt": [ "EC2Client01", "PublicDnsName" ] }] ]},
      "Description" : "SSH command for EC2 client"
    },
    "SQLServerEndpoint": {
      "Description" : "Endpoint/DNS for SQLServer Instance",
      "Value" : { "Fn::Join": ["", [ "SQLServerDNS: ", { "Fn::GetAtt": [ "SQLServerEE13", "PublicDnsName" ] } ] ]
      }
    },
    "OracleEndpoint": {
      "Description" : "Endpoint for Oracle Instance",
      "Value" : { "Fn::Join": ["", [ "Oracle Endpoint: ", { "Fn::GetAtt": [ "OracleDB", "Endpoint.Address" ] } ] ]
      }
    },
    "AuroraWriterEndpoint": {
      "Description" : "Writer Endpoint for Aurora Postgres Cluster",
      "Value" : { "Fn::Join": ["", [ "Aurora Writer Endpoint: ", { "Fn::GetAtt": [ "AUPG106", "Endpoint.Address" ] } ] ]
      }
    },
    "AuroraReaderEndpoint": {
      "Description" : "Reader Endpoint for Aurora Postgres Cluster",
      "Value" : { "Fn::Join": ["", [ "Aurora Reader Endpoint: ", { "Fn::GetAtt": [ "AUPG106", "ReadEndpoint.Address" ] } ] ]
      }
    }
  }
}
